<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>Messaging system - UNITE</title>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="A cool thing made with Glitch">
  <link id="favicon" rel="icon" href="https://glitch.com/edit/favicon-app.ico" type="image/x-icon">
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="/messages.css">
  <link rel="stylesheet" href="/jquery-ui.css">
  <link rel="stylesheet" href="/bootstrap.min.css">  
  <script src="/jquery.min.js"></script>
  <script src="/jquery-ui.min.js"></script>
  <script src="/popper.min.js"></script>
  <script src="/bootstrap.min.js"></script>
  <script src="/mustache.min.js"></script>
  <script src="/moment.min.js"></script>
  <script src="/qs.min.js"></script>
  <script src="/index.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="/sweetalert2@9.min.js"></script>
  <script src="/https.js"></script>
  <script src="/chatUsers.js"></script>
  <script src="/functions.js"></script>
  <script type="text/javascript">
    $(document).ready(function() {
      errorSuccess(Swal, '<%= errorMessage %>', '<%= successMessage %>');
      const token = $("input[name='_csrf']").val();
      const sock = io();
     
      //Inputs (plain JS):
      let messages = document.getElementById("messages");
      let $messages = document.getElementById("messages2");
      let messageInput = document.getElementById("message");
      let sender = document.getElementById("from");
      let receiver = document.getElementById("to");
      let senderName = document.getElementById("fromName");
      let receiverName = document.getElementById("toName");
      let username = document.getElementById("username");
      let room = document.getElementById("room");
      let requestId = document.getElementById("reqId");
      let reqName = document.getElementById("reqName");
      let typing = document.getElementById("typing");
      
      const user = {
        id: sock.id,
        username: username.value,
        room: room.value
      }
      
      //Templating:
      const messageTemplate = $('#message-template').text();
      const locationMessageTemplate = $('#location-message-template').text();      
      const sidebarTemplate = $('#sidebar-template').text();
      
      const autoscroll = (messageElem) => {
        const elem = messageElem? messageElem : $messages;
        const $newMessage = elem.lastElementChild;
        const newMessageStyles = getComputedStyle($newMessage);
        const newMessageMargin = parseInt(newMessageStyles.marginBottom);
        const newMessageHeight = $newMessage.offsetHeight + newMessageMargin;
        const visibleHeight = elem.offsetHeight;
        const containerHeight = elem.scrollHeight;
        const scrollOffset = elem.scrollTop + elem.offsetHeight;
        
        if(containerHeight - newMessageHeight >= scrollOffset) {
          elem.scrollTop = elem.scrollHeight;
        }        
      };
                                  
      if(reqName.value && reqName.value != 'None') {
          $('<h4 style="color: blue">Chat about the Order "' + reqName.value + '"</h3>').insertBefore($(messageInput));
      } else {
        $('<h5 style="color: teal">Supervisor has come in: "' + username.value + '"</h3>').insertBefore($(messageInput));
      }
      
      $('.minimize').click(function() {      
          $(this).toggleClass('btn-plus');
          $(".chat_window").slideToggle();   
      });
      
      $('.close').click(function() {      
        $(this).toggleClass('btn-plus');
        $(".chat_window").hide();   
        $('.back').trigger('click');
      });
      
      $('.maximize').on('click', function() {
        if($(this).hasClass('maxClick')) {
          $(this).removeClass('maxClick');
          $('.chat_window').css({'height': '576px', 'max-width': '800px'});
        } else {
          $(this).addClass('maxClick');
           $('.chat_window').css({'height': '700px', 'max-width': '1024px'});
        }
        
        $('.chat_window').css('width', 'calc(100% - 20px)');
      });
      
      function putMessages(messages, data) {
        let li = document.createElement("li");
        let span = document.createElement("span");
        messages
          .appendChild(li)
          .append(data.message);
        messages
          .appendChild(span);
          $(span).append("From <b><u>" + data.sender + "</u></b> to <b style='color: purple'><u>" + data.receiver + "</u></b> at: " + (data.time));
        }     
                                  
        function addMessages(message) {
           $('#messages1').append('<h4>' + message.sender + '</h4><p>' + message.message + '</p>');
        }
                                  
        function getMessages(data) {
          for(let item of data) {
            putMessages(messages, item);
          }
        }
      
        let data = [];

        <% if(messages != null) { for(let m of messages) { %>
        data.push({
          id: '<%= m._id %>',
          to: '<%= m.to %>',
          from: '<%= m.from %>',
          sender: '<%= m.sender %>',
          receiver: '<%= m.receiver %>',
          bidRequestId: '<%= m.bidRequestId %>',
          message: '<%= m.message %>',
          time: '<%= m.time %>',
          createdAt: '<%= m.createdAt %>',
          updatedAt: '<%= m.updatedAt %>'
        });
        % } } %>
                      
        getMessages(data);      
      
        sock.on('countUpdated', (count) => {
          $('#messages1 p').text('The connections count has been updated! It is ' + count + '.');
        });
      
        $('#increment').on('click', function() {
          console.log('Clicked!');
          sock.emit('increment');
        });
      
        function sendMessage(message) {
          $.ajax({
            url: "/messages",
            headers: { "X-CSRF-Token": token },
            datatype: 'application/json',
            type: "POST",
            data: message,
            success: function(data) {
              }
            });
        }
      
        $("#message-form").submit(function(e) {
            e.preventDefault();//prevents page reloading
            let msg = {
               from: sender.value,
               to: receiver.value,
               sender: $('#fromName').val(),
               receiver: $('#toName').val(),
               bidRequestId: !requestId.value || requestId.value.length < 12? null : requestId.value,
               message: $("#message").val()
            }
            
            //sock.emit('sendMessage', msg);
            sock.emit("sendMessage", msg, (error) => {
              $('#send').prop('disabled', false);
              if(typeof error !== 'undefined') {
                  alert(error);
                 $("#message").val("").focus();
                return false;
              }
              
              let li = document.createElement("li");
              messages.appendChild(li).append($("#message").val());
              $("#message").val("").focus();
              let span = document.createElement("span");
              messages.appendChild(span);
              $(span).append("From <b><u>" + $('#fromName').val() + "</u></b> to <b style='color: purple'><u>" + $('#toName').val() + "</u></b>: " + "Just now.");
              autoscroll(messages);
            });
            $('#send').prop('disabled', true);
            //sendMessage(obj);//Via AJAX.
        });
      
        //sock.on('message', addMessages);
        sock.on("received", (data) => {
          let li = document.createElement("li"), span = document.createElement("span");
          messages.appendChild(li).append(data.message);
          messages.appendChild(span).append("From " + $('#fromName').val() + " to " + $('#toName').val() + ": " + "Just now.");
          
          console.log("Hello, " + $('#fromName').val() + '!');
        });
      
      messageInput.addEventListener("keypress", (e) => {//e.target.elements
        sock.emit("typing", {
          user: "UNITE User - " + senderName.value,
          message: " is typing..." });
      });
                                  
      sock.on("notifyTyping", (data) => {
        typing.innerText = data.user + " types " + data.message;
      });
      
      //stop typing
      messageInput.addEventListener("keyup", (e) => {
        sock.emit("stopTyping", "");
      });
      
      sock.on("notifyStopTyping", (e) => {
        typing.innerText = "";
      });
      
      $('#sendLocation').bind('click', function() {
        if(!navigator.geolocation) {
          return Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Geolocation not supported at your endpoint. We are sorry for the inconvenience.'
          });
        }
        $('#sendLocation').prop('disabled', true);
        navigator.geolocation.getCurrentPosition((position) => {
          sock.emit('sendLocation', {
            latitude: position.coords? position.coords.latitude : '45,00',
            longitude: position.coords? position.coords.longitude : '25,00'
          }, () => {
            $('#sendLocation').prop('disabled', false);
            console.log('Location has been shared!');//Callback means feedback.
        });
      });
    });                         
      
    //user = addUser({id: sock.id, username: user.username, room: user.room});
    const object = {username: user.username, room: user.room};

    sock.on('message', (message) => {
      $(messages).append(message);
      
      const html = Mustache.render(messageTemplate, {
        username: message.username,
        message: message.text,
        createdAt: moment(message.createdAt).format('HH:mm:ss A')
      });
   
      $($messages).append(html);
      autoscroll();
    });
  
    sock.emit('join', object, (error) => {
      if(error) {
        alert(error);
        location.href = '/';
      }
    });
      
    sock.on('roomData', ({ room, users }) => {
      //alert(room + '\n' + users);
      const html = Mustache.render(sidebarTemplate, {
        room, users
      });
      
      $('#sidebar').append(html);
    });
      
    sock.on('locationMessage', (message) => {
      alert(url);
      const html = Mustache.render(locationMessageTemplate, {
        username: message.username,
        url: message.url,
        createdAt: moment(message.createdAt).format('HH:mm:ss A')
      });

      $($messages).append(html);
      autoscroll();
    });
  });
  </script>
</head>
  
<body>
  <nav user="supplier" class="navbar navbar-expand-lg navbar-dark bg-dark" style="position: absolute; width: 100% !important;">
    <a class="navbar-brand" href="/">UNITE</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
  </nav>
  <br><br>
  <div class="top_menu">          
    <div class="buttons" style="float: left">
      <div class="button minimize" title="Minimize"></div>
      <div class="button maximize" title="Maximize"></div>
      <div class="button close" title="Close"></div>
    </div>          
  </div>
<div class="container">
    <br>
    <div class="chat_window">
      <div class="title text-center">
        <span title="Talk" style="font-weight: bold">UNITE Chat - Talk to your partner instantly!</span>
      </div>  
      <div style="position: center; color: green; font-family: arial; font-size: 12pt">
        <span id="partner1"><b style="color: brown"><u><%= fromName %></u></b> and <b style="color: purple"><u><%= toName %></u></b> are in chat</span>
      </div>
      <br>
      <ul id="messages" class="messages">
      </ul>
      <form id="message-form">
        <div class="message_input_wrapper">
          <input type="hidden" name="from" id="from" value="<%= from %>"/>
          <input type="hidden" name="to" id="to" value="<%= to %>"/>
          <input type="hidden" name="reqId" id="reqId" value="<%= reqId %>"/>
          <input type="hidden" name="reqName" id="reqName" value="<%= reqName %>"/>
          <input type="hidden" name="fromName" id="fromName" value="<%= fromName %>"/>
          <input type="hidden" name="username" id="username" value="<%= username %>"/>
          <input type="hidden" name="room" id="room" value="<%= room %>"/>
          <input type="hidden" name="toName" id="toName" value="<%= toName %>"/>
          <div class="form-group">
            <input id="message" name="message" style="width: 100%" class="message_input" title="Press Send or Enter to send" required autocomplete="on" placeholder="Type your message here">
          </div>
        </div>
        <div class="form-group">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">
          <button id="send" type='submit' class="btn btn-primary send_message">Send</button>
        </div>
        <div class="form-group">
        <button class="btn btn-secondary" style="float: left" title="Send your geographic location" style="color: blue; cursor: pointer" id="sendLocation">
          Send Location
        </button>          
        </div>
      </form>
      <div class="form-group">
      <button class="btn btn-primary" title="Increment Connections" id="increment" style="float: right">
        Increment
      </button>
      </div>
      <br><br>
      <div class="form-group align-center">
        <div id="messages1" style="display: inline; color: fuchsia">
          <p>
          </p>
        </div>
      </div>
      <div class="bottom_wrapper clearfix">
        <br>
          <input type='hidden' id="name" class="form-control" placeholder=”Name”>
        <br>
        <i id="typing"></i>
        </div>      
      </div>
  </div>
    <div>
      <div id="sidebar" class="chat_sidebar">
    </div>
    <div class="chat">
      <div class="chat_sidebar">
      </div>
      <div class="chat_main">
        <div id="messages2" class="chat_messages">
        </div>
        <div class="compose">
  <!-- Moved the form and the Send Location-->
        </div>
    </div>
  </div>
  <script id="message-template" type="text/html">
    <div class="message">
      <p><span class="messageName">{{username}}</span>
         <span class="messageMeta">{{createdAt}}</span>
      </p>
       <p>{{message}}</p>
    </div>
  </script>
  <script id="location-message-template" type="text/html">
    <div class="message">
      <p><span class="messageName">{{username}}</span>
         <span class="messageMeta">{{createdAt}}</span>
      </p>
      <p><a href="{{url}}" target="_blank">My current location</a></p>
    </div>
  </script>
  <script id="sidebar-template" type="text/html">
    <h2 class="room-title">{{room}}</h2>
    <h3 class="list-title">User List</h3>
    <ol class="users">
      {{#users}}
        <li>{{username}}</li>
      {{/users}}
    </ol>
  </script>
</div>
</body>
</html>